import numpy as np
from numpy.linalg import inv


def ukfupdate(xsigmapts, ysigmapts, yobs, sigw):
    """Provides Updated mean and covariance.

    :param xsigmapts: prior state sigma points.
    :param ysigmapts: measurement generated by prior state sigma points.
    :param yobs: actual measurement.
    :param sigw: sigma point weights.
    :return: updatedata.
    """
    # Calculating the mean of xsigmapts
    xm = xsigmapts.mean(0)
    # Calculating the mean of ysigmapts
    ym = ysigmapts.mean(0)
    # Calculating pxx
    l1 = np.shape(xsigmapts)[0]
    pxx = np.zeros((l1, l1))
    pyy = np.zeros((l1, l1))
    pxy = np.zeros((l1, l1))
    # If error happens here check for dimension of state space and the number of sigma points
    for i in range(0, 2*l1):
        pxx = pxx + sigw.wc[i]*np.matmul(xsigmapts[:, i]-xm, (xsigmapts[:, i]-xm).transpose())
        pyy = pyy + sigw.wc[i]*np.matmul(ysigmapts[:, i]-ym, (ysigmapts[:, i]-ym).transpose())
        pxy = pxy + sigw.wc[i]*np.matmul(xsigmapts[:, i]-xm, (ysigmapts[:, i]-ym).transpose())
    K = np.matmul(pxy, inv(pyy))
    xmpost = xm + np.matmul(K, (yobs-ym))
    xcpost = pxx - np.matmul(np.matmul(K, pyy), K.transpose())
    updatedata = {"xmpost": xmpost, "xcpost": xcpost}
    return updatedata
